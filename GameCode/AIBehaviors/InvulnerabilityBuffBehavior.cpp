//=====================================================
// InvulnerabilityBuffBehavior.cpp
// by Andrew Socha
//=====================================================

#include "InvulnerabilityBuffBehavior.hpp"
#include "../Entities/NPC.hpp"
#include "Engine/XML/XMLParsingSupport.hpp"
#include "../MessageBar.hpp"
#include "../Faction.hpp"

AIBehaviorRegistration InvulnerabilityBuff::s_invulnerabilityBuffRegistration(std::string("InvulnerabilityBuff"), (AICreationFunction*)&CreateAIBehavior);

///=====================================================
/// 
///=====================================================
InvulnerabilityBuff::InvulnerabilityBuff(const std::string& name, const XMLNode& behaviorNode) :
BaseAIBehavior(name, BehaviorType::Aide, behaviorNode),
m_range(0),
m_duration(0),
m_buffTarget(nullptr){
	m_duration = GetIntAttribute(behaviorNode, "duration", m_duration);
	m_range = GetIntAttribute(behaviorNode, "range", m_range);
}

///=====================================================
/// 
///=====================================================
float InvulnerabilityBuff::CalcUtility(){
	if (m_NPC->m_health == m_NPC->m_maxHealth || m_NPC->m_isInvulnerable)
		return 0.0f;

	m_buffTarget = nullptr;
	bool foundADamagedAlly = false;
	float highestAllyBravery = 0.0f;
	int lowestAllyHealth = INT_MAX;
	
	for (std::vector<Actor*>::const_iterator actorIter = m_NPC->m_visibleActors.cbegin(); actorIter != m_NPC->m_visibleActors.cend(); ++actorIter){
		Actor* actor = *actorIter;
		if (actor == m_NPC || actor->IsPlayer() || actor->m_isInvulnerable)
			continue;

		if (CalcDistanceSquared(m_NPC->m_position, actor->m_position) > (m_range * m_range) || actor->m_faction == nullptr || m_NPC->GetFactionStatus(actor->m_faction->m_factionID, actor->m_ID) <= 0)
			continue;

		NPC* npc = (NPC*)actor;
		
		if (npc->m_health != npc->m_maxHealth){
			if (npc->m_health < lowestAllyHealth){
				//get the lowest health damaged ally
				foundADamagedAlly = true;
				lowestAllyHealth = npc->m_health;
				m_buffTarget = npc;
			}
		}
		else if (foundADamagedAlly == false && npc->m_bravery > highestAllyBravery){
			//if no damaged allies found, get the highest bravery ally
			highestAllyBravery = npc->m_bravery;
			m_buffTarget = npc;
		}
	}

	if (m_buffTarget != nullptr){
		float utility = (1.5f * (float)(m_NPC->m_maxHealth - m_NPC->m_health)) + (float)(m_buffTarget->m_maxHealth - m_buffTarget->m_health);
		return utility;
	}

	return 0.0f;
}

///=====================================================
/// 
///=====================================================
bool InvulnerabilityBuff::Think(){
	FATAL_ASSERT(m_buffTarget != nullptr);

	if (m_buffTarget->m_isInvulnerable || m_buffTarget->m_isDead || m_NPC->m_health == m_NPC->m_maxHealth || m_NPC->m_isInvulnerable || CalcDistanceSquared(m_NPC->m_position, m_buffTarget->m_position) > (m_range * m_range)){
		m_NPC->m_ignoredBehaviors.push_back(this);
		m_NPC->PlanNextThink(false);
		return m_NPC->Think(false);
	}

	m_NPC->Die();

	m_buffTarget->m_isInvulnerable = true;
	m_buffTarget->m_invulnerabilityExpirationTurn = Entity::s_turnCount + m_duration;
	if (!m_buffTarget->IsPlayer())
		((NPC*)m_buffTarget)->m_bravery += 1.0f;

	if (m_NPC->CanSeePlayer() || m_buffTarget->CanSeePlayer())
		s_theMessageBar->m_messages.push_back(m_NPC->m_name + " sacrifices himself to grant " + m_buffTarget->m_name + " invulnerability!");

	return true;
}
